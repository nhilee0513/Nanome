{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.legend_handler import HandlerLine2D\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weather_datetime</th>\n",
       "      <th>solar_datetime</th>\n",
       "      <th>solarRadiation</th>\n",
       "      <th>uvHigh</th>\n",
       "      <th>winddirAvg</th>\n",
       "      <th>humidityHigh</th>\n",
       "      <th>humidityLow</th>\n",
       "      <th>humidityAvg</th>\n",
       "      <th>qcStatus</th>\n",
       "      <th>tempHigh</th>\n",
       "      <th>...</th>\n",
       "      <th>windchillAvg</th>\n",
       "      <th>heatindexHigh</th>\n",
       "      <th>heatindexLow</th>\n",
       "      <th>heatindexAvg</th>\n",
       "      <th>pressureMax</th>\n",
       "      <th>pressureMin</th>\n",
       "      <th>pressureTrend</th>\n",
       "      <th>precipRate</th>\n",
       "      <th>precipTotal</th>\n",
       "      <th>DC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-02-07 14:29:00</td>\n",
       "      <td>2020-02-07 14:29:1</td>\n",
       "      <td>627.70</td>\n",
       "      <td>7.0</td>\n",
       "      <td>195</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>-1</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>30.06</td>\n",
       "      <td>30.05</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-02-07 14:34:00</td>\n",
       "      <td>2020-02-07 14:34:1</td>\n",
       "      <td>617.31</td>\n",
       "      <td>7.0</td>\n",
       "      <td>129</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>-1</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>67</td>\n",
       "      <td>68</td>\n",
       "      <td>66</td>\n",
       "      <td>67</td>\n",
       "      <td>30.06</td>\n",
       "      <td>30.05</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-07 14:39:00</td>\n",
       "      <td>2020-02-07 14:39:1</td>\n",
       "      <td>608.13</td>\n",
       "      <td>6.0</td>\n",
       "      <td>108</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>-1</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>67</td>\n",
       "      <td>68</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>30.06</td>\n",
       "      <td>30.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-07 14:44:00</td>\n",
       "      <td>2020-02-07 14:44:1</td>\n",
       "      <td>582.57</td>\n",
       "      <td>6.0</td>\n",
       "      <td>87</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>-1</td>\n",
       "      <td>67</td>\n",
       "      <td>...</td>\n",
       "      <td>66</td>\n",
       "      <td>67</td>\n",
       "      <td>66</td>\n",
       "      <td>66</td>\n",
       "      <td>30.06</td>\n",
       "      <td>30.05</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-07 14:49:00</td>\n",
       "      <td>2020-02-07 14:49:1</td>\n",
       "      <td>571.67</td>\n",
       "      <td>6.0</td>\n",
       "      <td>38</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>-1</td>\n",
       "      <td>66</td>\n",
       "      <td>...</td>\n",
       "      <td>66</td>\n",
       "      <td>66</td>\n",
       "      <td>66</td>\n",
       "      <td>66</td>\n",
       "      <td>30.05</td>\n",
       "      <td>30.04</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      weather_datetime      solar_datetime  solarRadiation  uvHigh  \\\n",
       "0  2020-02-07 14:29:00  2020-02-07 14:29:1          627.70     7.0   \n",
       "1  2020-02-07 14:34:00  2020-02-07 14:34:1          617.31     7.0   \n",
       "2  2020-02-07 14:39:00  2020-02-07 14:39:1          608.13     6.0   \n",
       "3  2020-02-07 14:44:00  2020-02-07 14:44:1          582.57     6.0   \n",
       "4  2020-02-07 14:49:00  2020-02-07 14:49:1          571.67     6.0   \n",
       "\n",
       "   winddirAvg  humidityHigh  humidityLow  humidityAvg  qcStatus  tempHigh  \\\n",
       "0         195            24           24           24        -1        65   \n",
       "1         129            24           23           23        -1        68   \n",
       "2         108            24           23           23        -1        68   \n",
       "3          87            25           24           24        -1        67   \n",
       "4          38            24           24           24        -1        66   \n",
       "\n",
       "   ...  windchillAvg  heatindexHigh  heatindexLow  heatindexAvg  pressureMax  \\\n",
       "0  ...            65             65            65            65        30.06   \n",
       "1  ...            67             68            66            67        30.06   \n",
       "2  ...            67             68            67            67        30.06   \n",
       "3  ...            66             67            66            66        30.06   \n",
       "4  ...            66             66            66            66        30.05   \n",
       "\n",
       "   pressureMin  pressureTrend  precipRate  precipTotal      DC  \n",
       "0        30.05           0.60         0.0          0.0  42.036  \n",
       "1        30.05          -0.15         0.0          0.0  42.126  \n",
       "2        30.05           0.00         0.0          0.0  42.264  \n",
       "3        30.05          -0.15         0.0          0.0  42.204  \n",
       "4        30.04          -0.15         0.0          0.0  42.360  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import and confirm dataset1\n",
    "d1 = pd.read_csv(\"D1.csv\")\n",
    "d1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weather_datetime</th>\n",
       "      <th>solar_datetime</th>\n",
       "      <th>solarRadiation</th>\n",
       "      <th>uvHigh</th>\n",
       "      <th>winddirAvg</th>\n",
       "      <th>humidityHigh</th>\n",
       "      <th>humidityLow</th>\n",
       "      <th>humidityAvg</th>\n",
       "      <th>qcStatus</th>\n",
       "      <th>tempHigh</th>\n",
       "      <th>...</th>\n",
       "      <th>windchillHigh</th>\n",
       "      <th>windchillAvg</th>\n",
       "      <th>heatindexHigh</th>\n",
       "      <th>heatindexLow</th>\n",
       "      <th>heatindexAvg</th>\n",
       "      <th>pressureMax</th>\n",
       "      <th>pressureMin</th>\n",
       "      <th>pressureTrend</th>\n",
       "      <th>precipRate</th>\n",
       "      <th>precipTotal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3/30/2020 21:54</td>\n",
       "      <td>3/30/2020 21:54</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>153</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>...</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>30.25</td>\n",
       "      <td>30.24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3/30/2020 21:59</td>\n",
       "      <td>3/30/2020 21:59</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>158</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>...</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>30.25</td>\n",
       "      <td>30.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3/30/2020 22:04</td>\n",
       "      <td>3/30/2020 22:04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>185</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>...</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>30.25</td>\n",
       "      <td>30.24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3/30/2020 22:09</td>\n",
       "      <td>3/30/2020 22:09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>155</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>...</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>30.25</td>\n",
       "      <td>30.24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3/30/2020 22:14</td>\n",
       "      <td>3/30/2020 22:14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>167</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>...</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>30.25</td>\n",
       "      <td>30.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  weather_datetime   solar_datetime  solarRadiation  uvHigh  winddirAvg  \\\n",
       "0  3/30/2020 21:54  3/30/2020 21:54             0.0       0         153   \n",
       "1  3/30/2020 21:59  3/30/2020 21:59             0.0       0         158   \n",
       "2  3/30/2020 22:04  3/30/2020 22:04             0.0       0         185   \n",
       "3  3/30/2020 22:09  3/30/2020 22:09             0.0       0         155   \n",
       "4  3/30/2020 22:14  3/30/2020 22:14             0.0       0         167   \n",
       "\n",
       "   humidityHigh  humidityLow  humidityAvg  qcStatus  tempHigh  ...  \\\n",
       "0            26           25           25         1        62  ...   \n",
       "1            25           25           25         1        62  ...   \n",
       "2            26           25           25         1        62  ...   \n",
       "3            26           25           25         1        61  ...   \n",
       "4            26           25           25         1        62  ...   \n",
       "\n",
       "   windchillHigh  windchillAvg  heatindexHigh  heatindexLow  heatindexAvg  \\\n",
       "0             62            62             62            62            62   \n",
       "1             62            62             62            62            62   \n",
       "2             62            61             62            61            61   \n",
       "3             61            61             61            61            61   \n",
       "4             62            61             62            61            61   \n",
       "\n",
       "   pressureMax  pressureMin  pressureTrend  precipRate  precipTotal  \n",
       "0        30.25        30.24            0.0           0            0  \n",
       "1        30.25        30.25            0.0           0            0  \n",
       "2        30.25        30.24            0.0           0            0  \n",
       "3        30.25        30.24            0.0           0            0  \n",
       "4        30.25        30.25            0.0           0            0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import and confirm dataset1\n",
    "d2 = pd.read_csv(\"D2.csv\")\n",
    "d2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Corrilation Chart\n",
    "d1Corr = d1.corr()\n",
    "ax = sns.heatmap(\n",
    "    d1Corr, \n",
    "    vmin=-1, vmax=1, center=0,\n",
    "    cmap=sns.diverging_palette(20, 240, n=20), #color data\n",
    "    square=False\n",
    ")\n",
    "ax.set_ylim(len(d1Corr)+0.5, -0.5) # move label ticks to align better\n",
    "ax.set_xticklabels( # rotate botom label ticks\n",
    "    ax.get_xticklabels(),\n",
    "    rotation=45,\n",
    "    horizontalalignment='right'\n",
    ")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "solarRadiation    0.701945\n",
       "uvHigh            0.665372\n",
       "winddirAvg       -0.280851\n",
       "humidityHigh     -0.243070\n",
       "humidityLow      -0.249210\n",
       "humidityAvg      -0.247262\n",
       "qcStatus         -0.100838\n",
       "tempHigh          0.325501\n",
       "tempLow           0.319308\n",
       "tempAvg           0.322341\n",
       "windspeedHigh     0.302366\n",
       "windgustLow       0.219940\n",
       "windspeedAvg      0.276677\n",
       "dewptHigh        -0.033934\n",
       "dewptLow         -0.055491\n",
       "dewptAvg         -0.044666\n",
       "windchillHigh     0.325648\n",
       "windchillAvg      0.321638\n",
       "heatindexHigh     0.321846\n",
       "heatindexLow      0.314918\n",
       "heatindexAvg      0.318261\n",
       "pressureMax       0.043609\n",
       "pressureMin       0.043092\n",
       "pressureTrend    -0.029149\n",
       "precipRate        0.003305\n",
       "precipTotal       0.052842\n",
       "Name: DC, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dc_corr = d1Corr[\"DC\"].drop(labels=[\"DC\"])\n",
    "dc_corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['solarRadiation', 'uvHigh', 'winddirAvg', 'humidityHigh', 'humidityLow', 'humidityAvg', 'qcStatus', 'tempHigh', 'tempLow', 'tempAvg', 'windspeedHigh', 'windgustLow', 'windspeedAvg', 'dewptHigh', 'dewptLow', 'dewptAvg', 'windchillHigh', 'windchillAvg', 'heatindexHigh', 'heatindexLow', 'heatindexAvg', 'pressureMax', 'pressureMin', 'pressureTrend', 'precipRate', 'precipTotal']\n"
     ]
    }
   ],
   "source": [
    "# returns a list of columns used for predictor values. Takes a float and \n",
    "# will return all column keys with a correlation with a greater value then specified\n",
    "def column_list(sig_val=0.0):\n",
    "    columns = []\n",
    "    for key in dc_corr.keys():\n",
    "        if abs(dc_corr[key]) >= sig_val:\n",
    "            columns.append(key)\n",
    "    return columns\n",
    "# test column_list()\n",
    "columns = column_list()\n",
    "print(columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Functuon splits data set into separate data sets.\n",
    "def test_train_split(data,split):\n",
    "  msk = np.random.rand(len(data)) < split\n",
    "  train = data[msk]\n",
    "  test = data[~msk]\n",
    "  return train, test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into traing and test into at most 80% for training\n",
    "d1_train, d1_test = test_train_split(d1, 0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get X and Y values, using all columns for predictors\n",
    "X_train = pd.DataFrame(d1_train, columns= columns)\n",
    "Y_train = d1_train.DC\n",
    "X_test = pd.DataFrame(d1_test, columns= columns)\n",
    "Y_test = d1_test.DC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize how max depth affects R^2 of model\n",
    "max_depths = list(range(1,10))\n",
    "train_results = []\n",
    "test_results = []\n",
    "for max_depth in max_depths:\n",
    "    model_rf = RandomForestRegressor(n_estimators=100, max_depth = max_depth)\n",
    "    model_rf.fit(X_train, Y_train)\n",
    "    train_pred = model_rf.predict(X_train)\n",
    "    test_pred = model_rf.predict(X_test)\n",
    "    train_results.append(r2_score(Y_train, train_pred))\n",
    "    test_results.append(r2_score(Y_test, test_pred))\n",
    "line1, = plt.plot(max_depths, train_results,'b', label=\"Train R2\")\n",
    "line2, = plt.plot(max_depths, test_results, 'r', label=\"Test R2\")\n",
    "plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n",
    "plt.ylabel('R2 Score')\n",
    "plt.xlabel('Max Depths')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# See How Max features affects R^2 of model, Max depth of 7 chosen based on previous visualization\n",
    "max_features_split = list(range(5,16))\n",
    "train_results = []\n",
    "test_results = []\n",
    "for max_features in max_features_split:\n",
    "    model_rf = RandomForestRegressor(n_estimators=100, max_depth = 7, max_features = max_features)\n",
    "    model_rf.fit(X_train, Y_train)\n",
    "    train_pred = model_rf.predict(X_train)\n",
    "    test_pred = model_rf.predict(X_test)\n",
    "    train_results.append(r2_score(Y_train, train_pred))\n",
    "    test_results.append(r2_score(Y_test, test_pred))\n",
    "line1, = plt.plot(max_features_split, train_results,'b', label=\"Train R2\")\n",
    "line2, = plt.plot(max_features_split, test_results, 'r', label=\"Test R2\")\n",
    "plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n",
    "plt.ylabel('R2 Score')\n",
    "plt.xlabel('Max Features')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "min_samples_leafs = list(range(1,41))\n",
    "train_results = []\n",
    "test_results = []\n",
    "for min_samples_leaf in min_samples_leafs:\n",
    "    model_rf = RandomForestRegressor(n_estimators=100, max_depth = 7, max_features = 10, min_samples_leaf = min_samples_leaf) \n",
    "    model_rf.fit(X_train, Y_train)\n",
    "    train_pred = model_rf.predict(X_train)\n",
    "    test_pred = model_rf.predict(X_test)\n",
    "    train_results.append(r2_score(Y_train, train_pred))\n",
    "    test_results.append(r2_score(Y_test, test_pred))\n",
    "from matplotlib.legend_handler import HandlerLine2D\n",
    "line1, = plt.plot(min_samples_leafs, train_results,'b', label=\"Train R2\")\n",
    "line2, = plt.plot(min_samples_leafs, test_results, 'r', label=\"Test R2\")\n",
    "plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n",
    "plt.ylabel('R2 Score')\n",
    "plt.xlabel('Min Weight Fraction')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train R^2 score 0.9762282086827287\n",
      "Test R^2 score 0.9642541040879784\n"
     ]
    }
   ],
   "source": [
    "#RF model. Training and testing split.\n",
    "# *Play around with values as d2 results change on codalab\n",
    "rf = RandomForestRegressor(n_estimators=1000, max_depth = 5, max_features = 15, min_samples_leaf = 30)\n",
    "rf.fit(X_train,Y_train) \n",
    "pred_train_rf= rf.predict(X_train)\n",
    "print(\"Train R^2 score\", r2_score(Y_train, pred_train_rf))\n",
    "\n",
    "pred_test_rf = model_rf.predict(X_test)\n",
    "print(\"Test R^2 score\", r2_score(Y_test, pred_test_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9768316837826817\n"
     ]
    }
   ],
   "source": [
    "#RF model trained with entire D1 dataset. \n",
    "# *Play around with values as d2 results change on codalab\n",
    "rf = RandomForestRegressor(n_estimators=2000, max_depth = 8, max_features = 20,min_samples_leaf = 30)\n",
    "rf.fit(pd.DataFrame(d1, columns= columns), d1.DC) \n",
    "pred_train_rf= rf.predict(pd.DataFrame(d1, columns= columns))\n",
    "print(r2_score(d1.DC, pred_train_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create file for d2 Guesses\n",
    "a_file = open(\"answer.txt\", \"w\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict DC values for D2 dataset and write to answer.txt\n",
    "# rf may come from model fit with entire d1, or train data. Run cell for model you want\n",
    "\n",
    "d2_predictors = pd.DataFrame(d2, columns= columns)\n",
    "predicted_d2DC = rf.predict(d2_predictors)\n",
    "np.savetxt(\"answer.txt\", predicted_d2DC, fmt='%f')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
